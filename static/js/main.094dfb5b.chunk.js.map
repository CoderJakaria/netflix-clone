{"version":3,"sources":["lib/axios.js","lib/request.js","components/banner/Banner.jsx","components/navbar/Nav.jsx","components/row/Row.jsx","pages/netflix-page/Netflix.jsx","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","useState","movie","setMovie","useEffect","a","get","request","data","results","Math","floor","random","length","fetchData","console","log","className","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","name","title","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","src","alt","Row","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","map","poster_path","onClick","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","err","handleClick","id","videoId","opts","height","width","playerVars","autoplay","Netflix","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.094dfb5b.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\"\r\n});\r\n\r\nexport default instance;","const API_KEY = \"039f1eb6a567f27d0336c97769e16360\";\r\n\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default requests;","import React, { useEffect, useState } from 'react';\r\nimport \"./Banner.css\";\r\nimport axios from '../../lib/axios';\r\nimport requests from '../../lib/request';\r\n\r\nconst Banner = () => {\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n\r\n            setMovie( request.data.results[Math.floor(Math.random() * request.data.results.length - 1)] );\r\n\r\n            return request;\r\n        }\r\n        fetchData();\r\n    },[])\r\n\r\n    console.log(movie);\r\n\r\n    function truncate(str, n) {\r\n        return str?.length > n ? str.substr(0, n-1) + \"...\" : str;\r\n    }\r\n\r\n    return (\r\n        <header className=\"banner\"\r\n          style={{\r\n              backgroundSize: \"cover\",\r\n              backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n              backgroundPosition: \"center center\"\r\n          }}\r\n        >\r\n            <div className=\"banner__contents\">\r\n               <h1 className=\"banner__title\">\r\n                   { movie?.name || movie?.title || movie?.original_name }\r\n               </h1>\r\n\r\n               <div className=\"banner__buttons\">\r\n                   <button className=\"banner__button\">Play</button>\r\n                   <button className=\"banner__button\">My List</button>\r\n               </div>\r\n\r\n               <h1 className=\"banner__description\">\r\n                   {truncate(movie?.overview, 150)}\r\n               </h1>\r\n            </div>\r\n\r\n            <div className=\"banner__fadeBottom\"></div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, { useEffect, useState } from 'react';\r\nimport \"./Nav.css\";\r\n\r\nconst Nav = () => {\r\n    const [show, handleShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", () => {\r\n            if(window.scrollY > 100) {\r\n                handleShow(true)\r\n            }else{\r\n                handleShow(false)\r\n            }\r\n        })\r\n        return () => {\r\n            window.removeEventListener('scroll')\r\n        }\r\n        \r\n    }, [])\r\n\r\n    return (\r\n        <div className={`nav ${show && \"nav__black\"}`}>\r\n            <img \r\n              className=\"nav__logo\"\r\n              src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/799px-Netflix_2015_logo.svg.png\"\r\n              alt=\"nav logo\"\r\n            />\r\n\r\n            <img \r\n              className=\"nav__avatar\"\r\n              src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\r\n              alt=\"nav avatar\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React, { useEffect, useState } from 'react';\r\nimport \"./Row.css\";\r\nimport axios from '../../lib/axios';\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nconst baseURL = \"https://image.tmdb.org/t/p/original\"\r\nconst Row = ({title, fetchUrl, isLargeRow}) => {\r\n\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results)\r\n            return request\r\n        };\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n\r\n    const opts = {\r\n        height: '390',\r\n        width: '100%',\r\n        playerVars: {\r\n          // https://developers.google.com/youtube/player_parameters\r\n          autoplay: 1,\r\n        },\r\n      };\r\n\r\n    \r\n    const handleClick = (movie) => {\r\n        if(trailerUrl) {\r\n            setTrailerUrl(\"\")\r\n        }else{\r\n            movieTrailer(movie?.name || \"\")\r\n              .then(url => {\r\n                  const urlParams = new URLSearchParams(new URL(url).search);\r\n                  setTrailerUrl(urlParams.get('v'))\r\n              })\r\n              .catch(err => console.log(err))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n \r\n            <h2 className=\"row__title\"> {title} </h2>\r\n\r\n            <div className=\"row__posters\">\r\n                {\r\n                    movies.map(movie => (\r\n                        <img\r\n                          key={movie.id}\r\n                          className={`row__poster ${isLargeRow && \"row__LargePoster\"}`} \r\n                          src={`${baseURL}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\r\n                          onClick={() => handleClick(movie)}\r\n                          alt={movie.name} />\r\n                    ))\r\n                }\r\n            </div>\r\n            {\r\n                trailerUrl ? (<YouTube videoId={trailerUrl} opts={opts} />) : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","import React from 'react'\r\nimport Banner from '../../components/banner/Banner'\r\nimport Nav from '../../components/navbar/Nav'\r\nimport Row from '../../components/row/Row'\r\nimport requests from '../../lib/request'\r\n\r\nconst Netflix = () => {\r\n    return (\r\n        <div>\r\n            <Nav />\r\n\r\n            <Banner />\r\n\r\n            <Row title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginals} isLargeRow />\r\n            <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\r\n            <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\r\n            <Row title=\"Action Movie\" fetchUrl={requests.fetchActionMovies} />\r\n            <Row title=\"Comedy Movie\" fetchUrl={requests.fetchComedyMovies} />\r\n            <Row title=\"Horror Movie\" fetchUrl={requests.fetchHorrorMovies} />\r\n            <Row title=\"Romance Movie\" fetchUrl={requests.fetchRomanceMovies} />\r\n            <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Netflix\r\n","import React from 'react'\nimport './App.css';\nimport Netflix from './pages/netflix-page/Netflix';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Netflix />\n    </div>\n  );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}